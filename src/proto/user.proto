syntax = "proto3";

package user;

service UserService {
  rpc GetUsers (GetUsersRequest) returns (UsersResponse);
  rpc GetUser (GetUserRequest) returns (UserResponse);
  rpc UpdateUser (UpdateUserRequest) returns (Status);
  rpc DeleteUser (DeleteUserRequest) returns (Status);
}

message GetUsersRequest {
  repeated string user_ids = 1;
  int32 offset = 2;
}

message GetUserRequest {
  string username = 1;
  string req_user_id = 2;
}

message UpdateUserRequest {
  string user_id = 1;
  UpdatedFields updated_fields = 2;
}

message DeleteUserRequest {
  string user_id = 1;
}

message UserResponse {
  Status status = 1;
  UserProfile user = 2;
}

message UsersResponse {
  Status status = 1;
  repeated User users = 2;
}

message Status {
  bool success = 1;
  string message = 2;
}

message User {
  string id = 1;
  string username = 2;
  string avatar = 3;
}

message UserProfile {
  string id = 1;
  string full_name = 2;
  string username = 3;
  Bio bio = 4;
  string account_type = 5;
  string dob = 6;
  Gender gender = 7;
  string profession = 8;
  string avatar = 9;
  string banner = 10;
  Relation relation = 11;
  int32 followers_count = 12;
  int32 following_count = 13;
  int32 posts_count = 14;
}

message Bio {
  string text = 1;
  repeated string links = 2;
  Track track = 3;
}

message Track {
  string id = 1;
  string title = 2;
  string artist = 3;
}

message Relation {
  Follow follow = 1;
  Mate mate = 2;
}

message Follow {
  RelationStatus follow_status = 1;
  bool is_followed = 2;
}

message Mate {
  RelationStatus mate_status = 1;
}

enum RelationStatus {
  pending = 1;
  accepted = 2;
}

message UpdatedFields {
  string full_name = 1;
  string username = 2;
  string dob = 3;
  AccountType account_type = 4;
  string bio = 5;
  Gender gender = 6;
  string profession = 7;
  string avatar = 8;
  string banner = 9;
}

enum AccountType {
  personal = 1;
  creator = 2;
  business = 3;
}

enum Gender {
  male = 1;
  female = 2;
}